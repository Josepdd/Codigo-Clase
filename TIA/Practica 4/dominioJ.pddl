(define (domain dominioJ)
(:requirements :durative-actions :typing :fluents)
(:types camion conductor paquete ciudad - object)
(:predicates (at ?x - (either camion conductor paquete) ?c - ciudad)
             (in ?c - (either conductor paquete) ?a - camion))
(:functions (distancia ?c1 - ciudad ?c2 - ciudad)
			(coste ?c1 - ciudad ?c2 - ciudad)
			(HayConductor ?c - camion)
			(EstaEnCamion ?c - conductor)
			(tiempo-carga)
			(coste-carga)
			(tiempo-descarga)
			(coste-descarga)
			(tiempo-subir-camion)
			(coste-subir-camion)
			(tiempo-bajar-camion)
			(coste-bajar-camion)
			(coste-total))


(:durative-action cargarPaquete
 :parameters (?p - paquete ?a - camion ?c - ciudad)
 :duration (= ?duration (tiempo-carga))
 :condition (and (at start (at ?p ?c))
                 (over all (at ?a ?c)))
 :effect (and (at start (not (at ?p ?c)))
              (at end (in ?p ?a))
              (at end (increase (coste-total) (coste-carga)))))

(:durative-action descargarPaquete
 :parameters (?p - paquete ?a - camion ?c - ciudad)
 :duration (= ?duration (tiempo-descarga))
 :condition (and (at start (in ?p ?a))
                 (over all (at ?a ?c)))
 :effect (and (at start (not (in ?p ?a)))
              (at end (at ?p ?c))
              (at end (increase (coste-total) (coste-descarga)))))

(:durative-action subirConductor
 :parameters (?a - conductor ?ci - ciudad ?ca - camion)
 :duration (= ?duration (tiempo-subir-camion))
 :condition (and (at start (<= (hayConductor ?ca) 0))
				 (at start (at ?a ?ci))
				 (at start (<= (EstaEnCamion ?a) 0))
                 (over all (at ?ca ?ci)))
 :effect (and (at end (in ?a ?ca))
              (at end (increase (hayConductor ?ca) 1))
              (at end (increase (EstaEnCamion ?a) 1))
              (at end (increase (coste-total) (coste-subir-camion))))) 

(:durative-action bajarConductor
 :parameters (?a - conductor ?ci - ciudad ?ca - camion)
 :duration (= ?duration (tiempo-bajar-camion))
 :condition (and (at start (>= (hayConductor ?ca) 1))
				 (at start (in ?a ?ca))
                 (over all (at ?ca ?ci)))
 :effect (and (at end (at ?a ?ci))
              (at end (decrease (hayConductor ?ca) 1))
              (at end (decrease (EstaEnCamion ?a) 1))
              (at end (increase (coste-total) (coste-bajar-camion)))))
              
(:durative-action conducirCamion
 :parameters (?a - conductor ?ci1 - ciudad ?ci2 - ciudad ?ca - camion)
 :duration (= ?duration (distancia ?ci1 ?ci2))
 :condition (and (at start (not (= ?ci1 ?ci2)))
				 (at start (> (distancia ?ci1 ?ci2) 0))
				 (at start (= (hayConductor ?ca) 1))
				 (at start (at ?ca ?ci1))
                 (over all (in ?a ?ca)))
 :effect (and (at start (not (at ?ca ?ci1)))
			  (at start (not (at ?a ?ci1)))
			  (at end (at ?ca ?ci2))
			  (at end (at ?a ?ci2))
              (at end (increase (coste-total) (coste ?ci1 ?ci2)))))   
              
(:durative-action irEnAutobus
 :parameters (?a - conductor ?ci1 - ciudad ?ci2 - ciudad)
 :duration (= ?duration 10)
 :condition (and (at start (at ?a ?ci1))
				 (at start (<= (EstaEnCamion ?a) 0)))
 :effect (and (at start (not (at ?a ?ci1)))
			  (at end (at ?a ?ci2))
			  (at end (increase (coste-total) 3))))
                 
)
